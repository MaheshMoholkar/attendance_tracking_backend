// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: division_info.sql

package postgres

import (
	"context"
)

const createDivisionInfo = `-- name: CreateDivisionInfo :one
INSERT INTO division_info (divisionName, class_id) 
VALUES ($1, $2) 
RETURNING division_id, divisionname, class_id
`

type CreateDivisionInfoParams struct {
	Divisionname string
	ClassID      int32
}

func (q *Queries) CreateDivisionInfo(ctx context.Context, arg CreateDivisionInfoParams) (DivisionInfo, error) {
	row := q.db.QueryRowContext(ctx, createDivisionInfo, arg.Divisionname, arg.ClassID)
	var i DivisionInfo
	err := row.Scan(&i.DivisionID, &i.Divisionname, &i.ClassID)
	return i, err
}

const deleteDivisionInfo = `-- name: DeleteDivisionInfo :exec
DELETE FROM division_info 
WHERE division_id = $1
`

func (q *Queries) DeleteDivisionInfo(ctx context.Context, divisionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteDivisionInfo, divisionID)
	return err
}

const getDivisions = `-- name: GetDivisions :many
SELECT division_id, divisionname, class_id 
FROM division_info
`

func (q *Queries) GetDivisions(ctx context.Context) ([]DivisionInfo, error) {
	rows, err := q.db.QueryContext(ctx, getDivisions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DivisionInfo
	for rows.Next() {
		var i DivisionInfo
		if err := rows.Scan(&i.DivisionID, &i.Divisionname, &i.ClassID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDivisionInfo = `-- name: UpdateDivisionInfo :one
UPDATE division_info 
SET divisionName = $1, class_id = $2 
WHERE division_id = $3 
RETURNING division_id, divisionname, class_id
`

type UpdateDivisionInfoParams struct {
	Divisionname string
	ClassID      int32
	DivisionID   int32
}

func (q *Queries) UpdateDivisionInfo(ctx context.Context, arg UpdateDivisionInfoParams) (DivisionInfo, error) {
	row := q.db.QueryRowContext(ctx, updateDivisionInfo, arg.Divisionname, arg.ClassID, arg.DivisionID)
	var i DivisionInfo
	err := row.Scan(&i.DivisionID, &i.Divisionname, &i.ClassID)
	return i, err
}
