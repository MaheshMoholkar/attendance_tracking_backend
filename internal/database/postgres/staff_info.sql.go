// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: staff_info.sql

package postgres

import (
	"context"
)

const createStaffInfo = `-- name: CreateStaffInfo :one
INSERT INTO staff_info (
    firstName,
    lastName,
    email,
    staff_id
)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateStaffInfoParams struct {
	Firstname string
	Lastname  string
	Email     string
	StaffID   int32
}

func (q *Queries) CreateStaffInfo(ctx context.Context, arg CreateStaffInfoParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createStaffInfo,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.StaffID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStaffInfo = `-- name: DeleteStaffInfo :one
DELETE FROM staff_info
WHERE staff_id = $1
RETURNING id
`

func (q *Queries) DeleteStaffInfo(ctx context.Context, staffID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, deleteStaffInfo, staffID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getStaffInfo = `-- name: GetStaffInfo :one
SELECT id, firstname, lastname, email, staff_id 
FROM staff_info 
WHERE staff_id = $1
`

func (q *Queries) GetStaffInfo(ctx context.Context, staffID int32) (StaffInfo, error) {
	row := q.db.QueryRowContext(ctx, getStaffInfo, staffID)
	var i StaffInfo
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.StaffID,
	)
	return i, err
}

const getStaffsInfo = `-- name: GetStaffsInfo :many
SELECT id, firstname, lastname, email, staff_id 
FROM staff_info
`

func (q *Queries) GetStaffsInfo(ctx context.Context) ([]StaffInfo, error) {
	rows, err := q.db.QueryContext(ctx, getStaffsInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StaffInfo
	for rows.Next() {
		var i StaffInfo
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.StaffID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStaffInfo = `-- name: UpdateStaffInfo :one
UPDATE staff_info
SET firstName = $2,
    lastName = $3,
    email = $4
WHERE staff_id = $1
RETURNING id
`

type UpdateStaffInfoParams struct {
	StaffID   int32
	Firstname string
	Lastname  string
	Email     string
}

func (q *Queries) UpdateStaffInfo(ctx context.Context, arg UpdateStaffInfoParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateStaffInfo,
		arg.StaffID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
