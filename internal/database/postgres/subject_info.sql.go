// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: subject_info.sql

package postgres

import (
	"context"
)

const createSubjectInfo = `-- name: CreateSubjectInfo :one
INSERT INTO subject_info (subjectName, class_id) 
VALUES ($1, $2) 
RETURNING subject_id, subjectname, class_id
`

type CreateSubjectInfoParams struct {
	Subjectname string
	ClassID     int32
}

func (q *Queries) CreateSubjectInfo(ctx context.Context, arg CreateSubjectInfoParams) (SubjectInfo, error) {
	row := q.db.QueryRowContext(ctx, createSubjectInfo, arg.Subjectname, arg.ClassID)
	var i SubjectInfo
	err := row.Scan(&i.SubjectID, &i.Subjectname, &i.ClassID)
	return i, err
}

const deleteSubjectInfo = `-- name: DeleteSubjectInfo :exec
DELETE FROM subject_info 
WHERE subject_id = $1
`

func (q *Queries) DeleteSubjectInfo(ctx context.Context, subjectID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubjectInfo, subjectID)
	return err
}

const getSubjectIDByName = `-- name: GetSubjectIDByName :one
SELECT subject_id 
FROM subject_info
WHERE subjectName = $1 AND class_id=$2
`

type GetSubjectIDByNameParams struct {
	Subjectname string
	ClassID     int32
}

func (q *Queries) GetSubjectIDByName(ctx context.Context, arg GetSubjectIDByNameParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getSubjectIDByName, arg.Subjectname, arg.ClassID)
	var subject_id int32
	err := row.Scan(&subject_id)
	return subject_id, err
}

const getSubjects = `-- name: GetSubjects :many
SELECT subject_id, subjectname, class_id 
FROM subject_info
`

func (q *Queries) GetSubjects(ctx context.Context) ([]SubjectInfo, error) {
	rows, err := q.db.QueryContext(ctx, getSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubjectInfo
	for rows.Next() {
		var i SubjectInfo
		if err := rows.Scan(&i.SubjectID, &i.Subjectname, &i.ClassID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubjectInfo = `-- name: UpdateSubjectInfo :one
UPDATE subject_info 
SET subjectName = $1, class_id = $2 
WHERE subject_id = $3 
RETURNING subject_id, subjectname, class_id
`

type UpdateSubjectInfoParams struct {
	Subjectname string
	ClassID     int32
	SubjectID   int32
}

func (q *Queries) UpdateSubjectInfo(ctx context.Context, arg UpdateSubjectInfoParams) (SubjectInfo, error) {
	row := q.db.QueryRowContext(ctx, updateSubjectInfo, arg.Subjectname, arg.ClassID, arg.SubjectID)
	var i SubjectInfo
	err := row.Scan(&i.SubjectID, &i.Subjectname, &i.ClassID)
	return i, err
}
