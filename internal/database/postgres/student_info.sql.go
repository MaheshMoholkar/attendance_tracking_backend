// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: student_info.sql

package postgres

import (
	"context"
)

const createStudentInfo = `-- name: CreateStudentInfo :one
INSERT INTO student_info (
    firstName,
    lastName,
    rollno,
    email,
    className,
    division,
    year,
    student_id
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING student_id
`

type CreateStudentInfoParams struct {
	Firstname string
	Lastname  string
	Rollno    int32
	Email     string
	Classname string
	Division  string
	Year      int32
	StudentID int32
}

func (q *Queries) CreateStudentInfo(ctx context.Context, arg CreateStudentInfoParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createStudentInfo,
		arg.Firstname,
		arg.Lastname,
		arg.Rollno,
		arg.Email,
		arg.Classname,
		arg.Division,
		arg.Year,
		arg.StudentID,
	)
	var student_id int32
	err := row.Scan(&student_id)
	return student_id, err
}

const deleteStudentInfo = `-- name: DeleteStudentInfo :exec
DELETE FROM student_info
WHERE student_id = $1
`

func (q *Queries) DeleteStudentInfo(ctx context.Context, studentID int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudentInfo, studentID)
	return err
}

const getStudentInfo = `-- name: GetStudentInfo :one
SELECT id, firstname, lastname, rollno, email, classname, division, year, student_id 
FROM student_info 
WHERE student_id = $1
`

func (q *Queries) GetStudentInfo(ctx context.Context, studentID int32) (StudentInfo, error) {
	row := q.db.QueryRowContext(ctx, getStudentInfo, studentID)
	var i StudentInfo
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Rollno,
		&i.Email,
		&i.Classname,
		&i.Division,
		&i.Year,
		&i.StudentID,
	)
	return i, err
}

const getStudentsInfo = `-- name: GetStudentsInfo :many
SELECT id, firstname, lastname, rollno, email, classname, division, year, student_id 
FROM student_info
`

func (q *Queries) GetStudentsInfo(ctx context.Context) ([]StudentInfo, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentInfo
	for rows.Next() {
		var i StudentInfo
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Rollno,
			&i.Email,
			&i.Classname,
			&i.Division,
			&i.Year,
			&i.StudentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentInfo = `-- name: UpdateStudentInfo :exec
UPDATE student_info
SET firstName = $2,
    lastName = $3,
    rollno = $4,
    email = $5,
    className = $6,
    division = $7,
    year = $8
WHERE student_id = $1
`

type UpdateStudentInfoParams struct {
	StudentID int32
	Firstname string
	Lastname  string
	Rollno    int32
	Email     string
	Classname string
	Division  string
	Year      int32
}

func (q *Queries) UpdateStudentInfo(ctx context.Context, arg UpdateStudentInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentInfo,
		arg.StudentID,
		arg.Firstname,
		arg.Lastname,
		arg.Rollno,
		arg.Email,
		arg.Classname,
		arg.Division,
		arg.Year,
	)
	return err
}
